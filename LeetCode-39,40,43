class Solution {
/*
39.组合总和
给你一个 无重复元素 的整数数组 candidates 和一个目标整数 target ，找出 candidates 中可以使数字和为目标数 target 的 所有 不同组合 ，并以列表形式返回。你可以按 任意顺序 返回这些组合。
candidates 中的 同一个 数字可以 无限制重复被选取 。如果至少一个数字的被选数量不同，则两种组合是不同的。 
对于给定的输入，保证和为 target 的不同组合数少于 150 个。
*/
  public List<List<Integer>> combinationSum(int[] candidates, int target) {
    List<List<Integer>> res = new ArrayList<>();
    int len = candidates.length;
    if(len == 0) {
      return res;
    }
    Arrays.sort(candidates);
    Deque<Integer> path = new ArrayDeque<>();
    dfs(candidates, 0, len, target, path, res);
    return res;
  }

  private void dfs(int[] candidates, int begin, int len, int target, Deque<Integer> path, List<List<Integer>> res) {
    if(target == 0) {
      res.add(new ArrayList<>(path));
      return;
    }
    for(int i = begin; i < len; i++) {
      if(target - candidates[i] < 0) {
        break;
      }
      path.addLast(candidates[i]);
      dfs(candidates, i, len, target - candidates[i], path, res);
      path.removeLast();
    }
  }
/*
40.组合总和II
给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的每个数字在每个组合中只能使用 一次 。
注意：解集不能包含重复的组合。 
*/
  public List<List<Integer>> combinationSum2(int[] candidates, int target) {
    List<List<Integer>> res = new ArrayList<>();
    int len = candidates.length;
    if(len == 0) {
      return res;
    }
    Arrays.sort(candidates);
    Deque<Integer> path = new ArrayDeque<>(len);
    dfs(candidates, 0, len, target, path, res);
    return res;
  }
  private void dfs(int[] candidates, int begin, int len, int target, Deque<Integer> path, List<List<Integer>> res) {
    if(target == 0) {
      res.add(new ArrayList<>(path));
      return;
    }
    for(int i = begin; i < len; i++) {
      if(target - candidates[i] < 0) {
        break;
      }
      if(i > begin && candidates[i] == candidates[i - 1]) {
        continue;
      }
      path.addLast(candidates[i]);
      dfs(candidates, i + 1, len, target - candidates[i], path, res);
      path.removeLast();
    }
  }
/*
43.字符串相乘
给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。
注意：不能使用任何内置的 BigInteger 库或直接将输入转换为整数。
*/
  public String multiply(String num1, String num2) {
    if(num1.equals("0") || num2.equals("0")) {
        return "0";
    }
    int m = num1.length(), n = num2.length();
    int[] ansArr = new int[m + n];
    for(int i = m - 1; i >= 0; i--) {
        int x = num1.charAt(i) - '0';
        for(int j = n - 1; j >= 0; j--) {
            int y = num2.charAt(j) - '0';
            ansArr[i + j + 1] += x * y;
        }
    }
    for(int i = m + n - 1; i > 0; i--) {
        ansArr[i - 1] += ansArr[i] / 10;
        ansArr[i] %= 10;
    }
    int index = ansArr[0] == 0 ? 1 : 0;
    StringBuffer ans = new StringBuffer();
    while(index < m + n) {
        ans.append(ansArr[index]);
        index++;
    }
    return ans.toString();
  }
}
